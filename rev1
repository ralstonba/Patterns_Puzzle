const int inputPins[] = {2, 3, 4, 5};
const int numInputs = 4;

const int whiteLights[] = {9, 10, 11, 12};
const int levelWon = 7;
const int redLight = 8;

const int correctOrderLevel1[] = {1, 2, 3, 4};  // Correct order for level 1
const int correctOrderLevel2[] = {4, 3, 2, 1};  // Correct order for level 2

bool inputReceived[numInputs] = {false, false, false, false}; // Array to track if each input has been received
int currentLevel = 1;  // Variable to track the current level

void setup() {
  Serial.begin(9600);

  for (int i = 0; i < numInputs; i++) {
    pinMode(inputPins[i], INPUT_PULLUP);  // Pull inputs high internally
    pinMode(whiteLights[i], OUTPUT);
    digitalWrite(whiteLights[i], HIGH); // Ensure white lights start in an on state
  }

  pinMode(levelWon, OUTPUT);
  pinMode(redLight, OUTPUT);
}

void loop() {
  // Wait for the inputs
  for (int i = 0; i < numInputs; i++) {
    if (!inputReceived[i] && digitalRead(inputPins[i]) == LOW) {
      // Input received (pulled low)
      delay(50); // Debounce by waiting for a short time
      if (digitalRead(inputPins[i]) == LOW) { // Re-check the input
        Serial.println("Input " + String(i + 1) + " received for Level " + String(currentLevel));

        // Turn off the corresponding white light
        digitalWrite(whiteLights[i], LOW);

        // Mark input as received
        inputReceived[i] = true;

        // Check the order
        checkOrder();
      }
    }
  }
}

// Function to check the order of inputs
void checkOrder() {
  // Check if all inputs have been received
  bool allInputsReceived = true;
  for (int i = 0; i < numInputs; i++) {
    if (!inputReceived[i]) {
      allInputsReceived = false;
      break;
    }
  }

  // If all inputs are received, check the order for the current level
  if (allInputsReceived) {
    int *correctOrder;

    if (currentLevel == 1) {
      correctOrder = correctOrderLevel1;
    } else if (currentLevel == 2) {
      correctOrder = correctOrderLevel2;
    }

    // Check the order of inputs
    bool correct = true;
    for (int i = 0; i < numInputs; i++) {
      if (correctOrder[i] != (i + 1)) {
        correct = false;
        break;
      }
    }

    // Turn on the corresponding light based on the order
    if (correct) {
      // Correct order, turn on the green light
      Serial.println("Correct order for Level " + String(currentLevel) + "! Turning on win signal.");
      digitalWrite(levelWon, HIGH);  // Turn on win signal
      delay(1000);  // 1-second delay for win signal being on
      digitalWrite(levelWon, LOW);  // Turn off win signal
      nextLevel();
    } else {
      // Incorrect order, turn on the red light
      Serial.println("Incorrect order for Level " + String(currentLevel) + "! Turning on red light.");
      digitalWrite(redLight, HIGH);
      delay(1000); // 1-second delay for red light being on
      digitalWrite(redLight, LOW);
      resetSystem();
    }
  }
}

// Function to move to the next level
void nextLevel() {
  // Reset inputReceived array
  for (int i = 0; i < numInputs; i++) {
    inputReceived[i] = false;
  }

  // Turn on all white lights for the next level
  for (int i = 0; i < numInputs; i++) {
    digitalWrite(whiteLights[i], HIGH);
  }

  // Increment the current level
  currentLevel++;

  // If all levels are completed, reset the system
  if (currentLevel > 2) {
    resetSystem();
  }
}

// Function to reset the system
void resetSystem() {
  // Turn on all white lights
  for (int i = 0; i < numInputs; i++) {
    digitalWrite(whiteLights[i], HIGH);
    inputReceived[i] = false;
  }

  // Turn off both the red light and win signal
  digitalWrite(levelWon, LOW);
  digitalWrite(redLight, LOW);

  // Reset the current level
  currentLevel = 1;

  // Print a message to indicate system reset
  Serial.println("System reset.");

  // Delay to avoid immediate re-triggering
  delay(2000); // Adjust the delay time as needed (e.g., 2000 milliseconds)
}
